#ifndef STACK_HPP
 #define STACK_HPP
#include <string>
#include <deque>
#include <pair.hpp>
#include <limits>
#include <iostream>
#include <memory>

namespace ft
{

template <class T, class Container = std::deque<T> >
class stack
{

public:

/***********************************************************************************************************************************
*															TYPEDEF																
***********************************************************************************************************************************/
	



/***********************************************************************************************************************************
*															CONSTRUCTORS / DESTRUCTORS														
***********************************************************************************************************************************/

	

/***********************************************************************************************************************************
*															ITERATORS																
***********************************************************************************************************************************/


/***********************************************************************************************************************************
*															CAPACITY																
***********************************************************************************************************************************/

/***********************************************************************************************************************************
*															ELEMENT ACCESS																
***********************************************************************************************************************************/
	



/***********************************************************************************************************************************
*															MODIFIERS																
***********************************************************************************************************************************/

	

/***********************************************************************************************************************************
*															OBSERVERS																
***********************************************************************************************************************************/


/***********************************************************************************************************************************
*															OPERATIONS														
***********************************************************************************************************************************/
	
/***********************************************************************************************************************************
*															ALLOCATOR																
***********************************************************************************************************************************/

/***********************************************************************************************************************************
*															PRIVATE ATTRIBUTES																
***********************************************************************************************************************************/
	
	private :


/***********************************************************************************************************************************
*															EXTRA : LIST FUNCTON																
***********************************************************************************************************************************/	
	
};

}
#endif